# -*- coding: utf-8 -*-
"""model_utils

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u_I0N_KiozuZXQaUa5Jb_1KY-tU4z4Iw
"""

import torch
import torchvision.transforms as transforms
from PIL import Image
import json
import os

MODEL_PATH = "models/resnet_fashionmnist.pt"
LABELS_PATH = "data/tags_config.json"

def load_model():
    # Load label map
    with open(LABELS_PATH, "r") as f:
        label_map = json.load(f)

    # Define model
    model = torch.hub.load('pytorch/vision', 'resnet18', pretrained=False)
    model.fc = torch.nn.Linear(512, 10)  # For FashionMNIST
    model.load_state_dict(torch.load(MODEL_PATH, map_location=torch.device("cpu")))
    model.eval()

    return model, label_map

def preprocess_image(pil_img):
    if pil_img.mode != 'RGB':
        pil_img = pil_img.convert('RGB')  # Convert grayscale to RGB
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406],  # ImageNet norms
                             std=[0.229, 0.224, 0.225])
    ])
    return transform(pil_img).unsqueeze(0)  # Add batch dimension

def predict_image(pil_img, model, label_map):
    tensor = preprocess_image(pil_img)
    with torch.no_grad():
        outputs = model(tensor)
        probs = torch.nn.functional.softmax(outputs, dim=1)
        conf, pred = torch.max(probs, 1)
    return label_map[str(pred.item())], conf.item()