# -*- coding: utf-8 -*-
"""explain_utils

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LINVkhFygeMoSDzeegzwo7q1p18hM5KH
"""

import torch
import cv2
import numpy as np
from torchvision import transforms
from PIL import Image
from model_utils import preprocess_image

def get_gradcam(pil_img, model, target_layer="layer4"):
    model.eval()
    input_tensor = preprocess_image(pil_img)

    gradients = []
    activations = []

    def backward_hook(module, grad_input, grad_output):
        gradients.append(grad_output[0])

    def forward_hook(module, input, output):
        activations.append(output)

    # Register hooks
    hook_f = getattr(model, target_layer).register_forward_hook(forward_hook)
    hook_b = getattr(model, target_layer).register_backward_hook(backward_hook)

    output = model(input_tensor)
    pred_class = output.argmax().item()

    model.zero_grad()
    output[0, pred_class].backward()

    grads_val = gradients[0][0].cpu().numpy()
    acts_val = activations[0][0].cpu().numpy()

    weights = np.mean(grads_val, axis=(1, 2))
    cam = np.zeros(acts_val.shape[1:], dtype=np.float32)

    for i, w in enumerate(weights):
        cam += w * acts_val[i]

    cam = np.maximum(cam, 0)
    cam = cv2.resize(cam, (224, 224))
    cam = cam - cam.min()
    cam = cam / cam.max()

    heatmap = (cam * 255).astype(np.uint8)
    heatmap = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)

    img_np = np.array(pil_img.resize((224, 224)).convert("RGB"))
    result = cv2.addWeighted(img_np, 0.5, heatmap, 0.5, 0)

    result = Image.fromarray(result)
    hook_f.remove()
    hook_b.remove()
    return result